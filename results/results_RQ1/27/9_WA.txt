import java.util.*;

public class Main {

    private static class Pair implements Comparable<Pair> {
        int x;
        long score;

        public Pair(int x,long score) {
            this.x=x;
            this.score=score;
        }

        public String toString() {
            return "["+this.x+","+this.score+"]";
        }

        @Override
        public int compareTo(Pair p) { // Fixed the parameter name to something other than 'x'
            if(p.score - this.score > 0) // Flipped the comparison to sort in descending order
                return 1;
            if(p.score - this.score < 0)
                return -1;
            return 0;
        }
    }

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        HashMap<Integer, Long> rows=new HashMap<Integer, Long>();
        HashMap<Integer, Long> cols=new HashMap<Integer, Long>();
        HashMap<Integer, HashMap<Integer, Integer>> val=new HashMap<Integer, HashMap<Integer, Integer>>();
        for(int i=0;i<n;i++) {
            int r=sc.nextInt();
            int c=sc.nextInt();
            int x=sc.nextInt();
            rows.put(r,rows.getOrDefault(r,0L)+x);
            cols.put(c,cols.getOrDefault(c,0L)+x);
            HashMap<Integer, Integer> hm=val.getOrDefault(r,new HashMap<Integer, Integer>());
            hm.put(c,x);
            val.put(r,hm);
        }

        ArrayList<Pair> lcols=new ArrayList<Pair>();
        for(Integer x:cols.keySet())
            lcols.add(new Pair(x,cols.get(x)));
        Collections.sort(lcols);

        long ans=lcols.get(0).score;
        for(Integer x:rows.keySet()) {
            int i=0;
            while(i<lcols.size() && val.get(x).containsKey(lcols.get(i).x)) {
                i++;
            }
            if(i<lcols.size()) {
                ans=Math.max(ans, lcols.get(i).score + rows.get(x));
            } else {
                ans=Math.max(ans, rows.get(x));
            }
        }
        System.out.println(ans);
    }
}

input: 8
1 4 180999835
4 5 677959980
1 5 208032501
2 5 506147731
2 3 298309896
2 9 215208399
7 6 554374432
2 8 47628333

expect: 1953286840

actual: 1946514644

