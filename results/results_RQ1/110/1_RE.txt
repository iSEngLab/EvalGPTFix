package solve;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        BigInteger a = reader.nextBigInteger();
        BigInteger b = reader.nextBigInteger();
        BigInteger cnt = BigInteger.ZERO;
        while (!a.equals(b)) {
            if (a.compareTo(b) > 0) {
                BigInteger[] divMod = a.divideAndRemainder(b);
                cnt = cnt.add(divMod[0]);
                a = divMod[1];
            } else {
                BigInteger[] divMod = b.divideAndRemainder(a);
                cnt = cnt.add(divMod[0]);
                b = divMod[1];
            }
            if (a.equals(BigInteger.ZERO) || b.equals(BigInteger.ZERO)) {
                cnt = cnt.subtract(BigInteger.ONE);
                break;
            }
        }
        System.out.println(cnt);
    }

    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(
                    new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = "";
            try {
                if (st.hasMoreTokens()) {
                    str = st.nextToken("\n");
                } else {
                    str = br.readLine();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

}

input: 9 737738327422964222

expect: 81970925269218254

