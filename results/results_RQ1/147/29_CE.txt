void go() {
    int n = nextInt();
    long tot = nextInt();
    long[] f = new long[n];
    for (int i = 0; i < f.length; ++i) f[i] = nextInt();
    Arrays.sort(f);
    if (f[0] == 1) {
        sl(tot);
        return;
    } else if (n == 1) {
        sl(n * f[0]);
        return;
    }
    TreeSet<Long> a = new TreeSet<>();
    for (int i = 0; i < f.length; ++i) a.add(f[i]);
    TreeSet<Long> r = new TreeSet<>();
    HashSet<Long> s = new HashSet<>(); // new set to keep track of sums already added to r
    while (r.size() < tot) {
        long x = a.first();
        r.add(x);
        s.add(x); // add x to s
        a.remove(x);
        for (long t : f) {
            long sum = x + t;
            if (!s.contains(sum)) { // only add sum to a if it's not already in s
                a.add(sum);
            }
        }
    }
    sl(r.last());
}
