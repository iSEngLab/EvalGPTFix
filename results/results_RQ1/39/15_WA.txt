import java.io.IOException;
import java.io.InputStream;
import java.util.NoSuchElementException;

public class Main {

	public static void main(String[] args) {
		FastScanner sc = new FastScanner();
		int N = sc.nextInt();
		int D = sc.nextInt();
		int bfTime = sc.nextInt();
		if(N > 1 && Math.abs(bfTime - sc.nextInt()) < D) { // check first and second time values
			System.out.println(bfTime);
			return;
		}
		for(int i = 2; i < N; i++) { // start from i=2
			int time = sc.nextInt();
			if(Math.abs(bfTime - time) < D) {
				System.out.println(time);
				return;
			}
			bfTime = time;
		}
		System.out.println(-1);
	}
}

class FastScanner {
	private final InputStream in = System.in;
	private final byte[] buffer = new byte[1024];
	private int ptr = 0;
	private int buflen = 0;

	private boolean hasNextByte() {
		if (ptr < buflen) {
			return true;
		} else {
			ptr = 0;
			try {
				buflen = in.read(buffer);
			} catch (IOException e) {
				e.printStackTrace();
			}
			if (buflen <= 0) {
				return false;
			}
		}
		return true;
	}

	private int readByte() {
		if (hasNextByte())
			return buffer[ptr++];
		else
			return -1;
	}

	private static boolean isPrintableChar(int c) {
		return 33 <= c && c <= 126;
	}

	public boolean hasNext() {
		while (hasNextByte() && !isPrintableChar(buffer[ptr]))
			ptr++;
		return hasNextByte();
	}

	public String next() {
		if (!hasNext())
			throw new NoSuchElementException();
		StringBuilder sb = new StringBuilder();
		int b = readByte();
		while (isPrintableChar(b)) {
			sb.appendCodePoint(b);
			b = readByte();
		}
		return sb.toString();
	}

	public long nextLong() {
		if (!hasNext())
			throw new NoSuchElementException();
		long n = 0;
		boolean minus = false;
		int b = readByte();
		if (b == '-') {
			minus = true;
			b = readByte();
		}
		if (b < '0' || '9' < b) {
			throw new NumberFormatException();
		}
		while (true) {
			if ('0' <= b && b <= '9') {
				n *= 10;
				n += b - '0';
			} else if (b == -1 || !isPrintableChar(b)) {
				return minus ? -n : n;
			} else {
				throw new NumberFormatException();
			}
			b = readByte();
		}
	}

	public int nextInt() {
		long nl = nextLong();
		if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)
			throw new NumberFormatException();
		return (int) nl;
	}

	public double nextDouble() {
		return Double.parseDouble(next());
	}
}

input: 82 17836558
2846555 7208269 15122889 47458029 49312684 59677948 59780069 80644148 80663916 88938518 104169306 117856659 132400484 137409143 141045311 155863663 164129927 208203454 208353248 212661331 222583794 291029596 293358618 320944299 324005776 330434068 338008567 352819193 367511979 370905807 380178679 440413930 445858410 461867893 481043790 494175118 524965338 534027166 552243811 557091916 559636285 561946825 574353637 575544659 594039530 597401248 610853878 620281860 629827384 631615920 643414188 649063641 652031280 652658581 656246552 669420947 700789399 705653853 734523721 742612832 744276525 767316674 772395003 775006307 786193106 800329109 815739254 817682109 836936876 890292851 890545876 899199725 901478538 902401555 907253554 910660366 912737725 929581038 943334070 960043815 971852487 992644480

expect: 7208269

actual: 2846555

