import java.io.*;
import java.math.BigInteger;
import java.util.*;
import java.util.stream.Collectors;

class Comb {

    long[] p;
    long[] pi;
    long mod;

    public Comb(int n, long mod) {
        this.mod=mod;
        p=new long[n+1];
        pi=new long[n+1];
        p[0] = 1;
        pi[0] = 1;
        for (int i = 1; i <= n; i++) {
            p[i] = p[i - 1] * i % mod;
        }
        pi[n] = modinv(p[n], (int) mod);
        for (int i = n; i > 1; i--) {
            pi[i-1] = pi[i] * (long) i % mod;
        }
    }

    public long comb(int n, int r) {
        if (n < r) return 0;
        return p[n] * pi[r] % mod * pi[n - r] % mod;
    }

    public long perm(int n, int r) {
        if (n < r) return 0;
        return p[n] * pi[n - r] % mod;
    }

    long modinv(long a, long m) {
        long b = m;
        long u = 1;
        long v = 0;
        long tmp = 0;

        while (b > 0) {
            long t = a / b;
            a -= t * b;
            tmp = a;
            a = b;
            b = tmp;

            u -= t * v;
            tmp = u;
            u = v;
            v = tmp;
        }

        u %= m;
        if (u < 0) u += m;
        return u;
    }
}


public class Main {

    static long M=998244353;

    public void solve() throws Exception {
        int h=nextInt(),w=nextInt(),k=nextInt();
        long res=0;

        int hw = h * w;
        Comb c=new Comb(hw, M);

        long totalCombs = c.comb(h*w,k);
        // calculate combinations for each subpart
        long rowCombs[] = new long[h];
        for(int i=0;i<h;i++){
            rowCombs[i]=c.comb((i+1)*w,k);
        }

        long colCombs[] = new long[w];
        for(int i=0;i<w;i++){
            colCombs[i]=c.comb((i+1)*h,k);
        }

        long diagCombs1[] = new long[h+w-1];
        long diagCombs2[] = new long[h+w-1];

        //diagonal 1
        for(int i=1;i<=h;i++){
            int p = i-1;
            for(int j=1;j<=w && p+j<=h;j++){
                diagCombs1[i+j-2]+= c.comb(i*j,k);
            }
        }

        // diagonal 2
        for(int i=h;i>=1;i--){
            int p = h-i;
            for(int j=1;j<=w && p+j<=h;j++){
                diagCombs2[i+j-2]+= c.comb(i*j,k);
            }
        }

        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                // subtract combinations
                res-=rowCombs[i];
                res-=colCombs[j];
                int d1 = i+j;
                int d2 = i+w-j-1;
                if(d1>=0 && d1<h+w-1){
                    res-=diagCombs1[d1];
                }
                if(d2>=0 && d2<h+w-1){
                    res-=diagCombs2[d2];
                }

                // add combinations
                res+=totalCombs;
                res+=colCombs[j];
                res+=rowCombs[i];

                if(d1>=0 && d1<h+w-1){
                    res+=diagCombs1[d1];
                }
                if(d2>=0 && d2<h+w-1){
                    res+=diagCombs2[d2];
                }
                res%=M;
            }
        }
        long modinv = c.modinv(c.comb(h*w,k), M);
        out.println((res*modinv%M));
    }

    public static void main(String[] args) throws Exception {
        new Main().solve();
    }

    static PrintWriter out = new PrintWriter(System.out, true);
    static InputReader in = new InputReader(System.in);
    static String next() { return in.next(); }
    static int nextInt() { return Integer.parseInt(in.next()); }
    static long nextLong() { return Long.parseLong(in.next()); }
    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }
    }
}

input: 1000 1000 522

expect: 625692699

actual: 1000000

