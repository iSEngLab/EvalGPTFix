import java.io.*;
import java.math.BigInteger;
import java.util.*;
import java.util.stream.Collectors;

class Comb {

    long[] p;
    long[] pi;
    long mod;

    public Comb(int n, long mod) {
        this.mod = mod;
        p = new long[n + 1];
        pi = new long[n + 1];
        p[0] = 1;
        pi[0] = 1;
        for (int i = 1; i <= n; i++) {
            p[i] = p[i - 1] * i % mod;
        }
        pi[n] = modinv(p[n], mod);
        for (int i = n; i > 1; i--) {
            pi[i - 1] = pi[i] * (long) i % mod;
        }
    }

    public long comb(int n, int r) {
        if (n < r || n < 0 || r < 0) return 0;
        return p[n] * pi[r] % mod * pi[n - r] % mod;
    }

    public long perm(int n, int r) {
        if (n < r || n < 0 || r < 0) return 0;
        return p[n] * pi[n - r] % mod;
    }

    long modinv(long a, long m) {
        long b = m;
        long u = 1;
        long v = 0;
        long tmp = 0;

        while (b > 0) {
            long t = a / b;
            a -= t * b;
            tmp = a;
            a = b;
            b = tmp;

            u -= t * v;
            tmp = u;
            u = v;
            v = tmp;
        }

        u %= m;
        if (u < 0) u += m;
        return u;
    }
}

public class Main {

    static long M = 998244353;

    public void solve() throws Exception {
        int h = nextInt(), w = nextInt(), k = nextInt();
        long res = 0;

        int hw = h * w;
        Comb c = new Comb(hw, M);
        long comb_hw = c.comb(hw, k);

        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                long comb_i_j = c.comb(i * w + j, k);
                long comb_i_wj = c.comb(i * w + (w - j - 1), k);
                long comb_hw_j = c.comb(j * h + i, k);
                long comb_hw_wj = c.comb((w - j - 1) * h + i, k);
                long comb_h_i_j = c.comb((h - i - 1) * w + j, k);
                long comb_h_i_wj = c.comb((h - i - 1) * w + (w - j - 1), k);
                long comb_i_hw_j = c.comb(i + j * h, k);
                long comb_i_hw_wj = c.comb(i + (w - j - 1) * h, k);
                long comb_h_i_hw_j = c.comb((h - i - 1) + j * h, k);
                long comb_h_i_hw_wj = c.comb((h - i - 1) + (w - j - 1) * h, k);

                res += comb_hw;
                res -= comb_hw_j;
                res -= comb_hw_wj;
                res -= comb_h_i_j;
                res -= comb_h_i_wj;
                res += comb_i_j;
                res += comb_i_wj;
                res += comb_h_i_hw_j;
                res += comb_h_i_hw_wj;
                res += comb_i_hw_j;
                res += comb_i_hw_wj;
                res %= M;
            }
        }
        long modinv_val = c.modinv(comb_hw, M);
        out.println((res * modinv_val) % M);
    }

    public static void main(String[] args) throws Exception {
        new Main().solve();
    }

    static PrintWriter out = new PrintWriter(System.out, true);
    static InputReader in = new InputReader(System.in);

    static String next() {
        return in.next();
    }

    static int nextInt() {
        return Integer.parseInt(in.next());
    }

    static long nextLong() {
        return Long.parseLong(in.next());
    }

    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }
    }
}

input: 1000 1000 522

expect: 625692699

actual: 317846198

