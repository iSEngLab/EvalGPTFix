import java.util.*; 
import java.io.*; 
import java.math.*;

public class Main {
    
    static class InputIterator {
        ArrayList<String> inputLine = new ArrayList<>(1024);
        int index = 0; 
        int max; 
        String read;
        
        InputIterator(){
            try{
                BufferedReader br = new BufferedReader(new InputStreamReader(System.in, "UTF-8"));
                while((read = br.readLine()) != null){
                    inputLine.addAll(Arrays.asList(read.split(" ")));
                }
            } catch(IOException e){}
            max = inputLine.size();
        }
        
        boolean hasNext(){
            return (index < max);
        }
        
        String next(){
            if(hasNext()){
                return inputLine.get(index++);
            } else{
                throw new IndexOutOfBoundsException("There is no more input");
            }
        }
    }
    
    static HashMap<Integer, String> CONVSTR = new HashMap<>();
    InputIterator ii = new InputIterator();
    PrintWriter out = new PrintWriter(System.out);
    
    void flush(){
        out.flush();
    }
    
    void myout(Object t){
        out.println(t);
    }
    
    void myerr(Object... t){
        System.err.print("debug:");
        System.err.println(Arrays.deepToString(t));
    }
    
    String next(){
        return ii.next();
    }
    
    boolean hasNext(){
        return ii.hasNext();
    }
    
    int nextInt(){
        return Integer.parseInt(next());
    }
    
    long nextLong(){
        return Long.parseLong(next());
    }
    
    double nextDouble(){
        return Double.parseDouble(next());
    }
    
    ArrayList<String> nextCharArray(){
        return myconv(next(), 0);
    }
    
    ArrayList<String> nextStrArray(int size){
        ArrayList<String> ret = new ArrayList<>(size);
        for(int i = 0; i < size; i++){
            ret.add(next());
        }
        return ret;
    }
    
    ArrayList<Integer> nextIntArray(int size){
        ArrayList<Integer> ret = new ArrayList<>(size);
        for(int i = 0; i < size; i++){
            ret.add(Integer.parseInt(next()));
        }
        return ret;
    }
    
    ArrayList<Long> nextLongArray(int size){
        ArrayList<Long> ret = new ArrayList<>(size);
        for(int i = 0; i < size; i++){
            ret.add(Long.parseLong(next()));
        }
        return ret;
    }
    
    @SuppressWarnings("unchecked")
    String myconv(Object list, int no){
        StringBuilder sb = new StringBuilder("");
        String joinString = CONVSTR.get(no);
        if(list instanceof String[]){
            return String.join(joinString, (String[])list);
        } else if(list instanceof long[]){
            long[] tmp = (long[])list;
            if(tmp.length == 0){
                return "";
            }
            sb.append(String.valueOf(tmp[0]));
            for(int i = 1; i < tmp.length; i++){
                sb.append(joinString).append(String.valueOf(tmp[i]));
            }
            return sb.toString();
        } else if(list instanceof int[]){
            int[] tmp = (int[])list;
            if(tmp.length == 0){
                return "";
            }
            sb.append(String.valueOf(tmp[0]));
            for(int i = 1; i < tmp.length; i++){
                sb.append(joinString).append(String.valueOf(tmp[i]));
            }
            return sb.toString();
        } else if(list instanceof ArrayList){
            ArrayList tmp = (ArrayList)list;
            if(tmp.size() == 0){
                return "";
            }
            sb.append(tmp.get(0));
            for(int i = 1; i < tmp.size(); i++){
                sb.append(joinString).append(tmp.get(i));
            }
            return sb.toString();
        } else{
            throw new ClassCastException("Don't join");
        }
    }
    
    ArrayList<String> myconv(String str, int no){
        String splitString = CONVSTR.get(no);
        return new ArrayList<String>(Arrays.asList(str.split(splitString)));
    }
    
    ArrayList<String> myconv(String str, String no){
        return new ArrayList<String>(Arrays.asList(str.split(no)));
    }
    
    public static void main(String[] args){
        HashMap<Integer, String> CONVSTR = new HashMap<>();
        CONVSTR.put(8, " "); 
        CONVSTR.put(9, "\n"); 
        CONVSTR.put(0, "");
        Main instance = new Main();
        instance.solve();
        instance.flush();
    }
    
    void solve(){
        int N = nextInt();
        int Q = nextInt();
        ArrayList<ArrayList<Integer>> list = new ArrayList<>();
        
        for(int i = 1; i <= 200000; i++){
            list.add(null);
        }
        
        for(int i = 0; i < Q; i++){
            int t = nextInt();
            if(t == 1){
                int V = nextInt();
                int U = nextInt();
                HashSet<Integer> s = new HashSet<>();
                s.add(U);
                if(list.get(V) == null){
                    list.set(V, new ArrayList<Integer>());
                    list.get(V).add(U);
                } else{
                    list.get(V).add(U);
                }
                if(list.get(U) == null){
                    list.set(U, new ArrayList<Integer>());
                    list.get(U).add(V);
                } else{
                    list.get(U).add(V);
                }
            } else if(t == 2){
                int V = nextInt();
                if(list.get(V) != null){
                    ArrayList<Integer> output = list.get(V);
                    Collections.sort(output);
                    myout(myconv(output, 8));
                }
            }else{
                int V = nextInt();
                ArrayList<Integer> output = new ArrayList<>();  
                if(list.get(V) != null){
                    output = new ArrayList<>(list.get(V));
                }
                Collections.sort(output);
                myout(myconv(output, 8));
            }
        }
    }
}
