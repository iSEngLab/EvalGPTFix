import java.util.*;

public class Main {

    private static class Pair implements Comparable<Pair> {
        int x;
        long score;

        public Pair(int x, long score) {
            this.x = x;
            this.score = score;
        }

        public String toString() {
            return "[" + this.x + "," + this.score + "]";
        }

        @Override
        public int compareTo(Pair p) {
            if (this.score > p.score) {
                return -1;
            } else if (this.score < p.score) {
                return 1;
            } else {
                return 0;
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        HashMap<Integer, Long> rows = new HashMap<>();
        HashMap<Integer, Long> cols = new HashMap<>();
        HashMap<Integer, HashMap<Integer, Integer>> val = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int r = sc.nextInt();
            int c = sc.nextInt();
            int x = sc.nextInt();
            rows.put(r, rows.getOrDefault(r, 0L) + x);
            cols.put(c, cols.getOrDefault(c, 0L) + x);
            HashMap<Integer, Integer> hm = val.getOrDefault(r, new HashMap<>());
            hm.put(c, x);
            val.put(r, hm);
        }

        ArrayList<Pair> lcols = new ArrayList<>();
        for (Map.Entry<Integer, Long> entry : cols.entrySet()) {
            lcols.add(new Pair(entry.getKey(), entry.getValue()));
        }
        Collections.sort(lcols);


        long ans = Long.MAX_VALUE;
        for (int i = 0; i < lcols.size(); i++) {
            long curr_col_score = lcols.get(i).score;
            long curr_ans = curr_col_score;

            for (Map.Entry<Integer, Long> row_entry : rows.entrySet()) {
                int curr_row = row_entry.getKey();

                if (!val.get(curr_row).containsKey(lcols.get(i).x)) {
                    curr_ans += row_entry.getValue();
                    break;
                }
            }

            ans = Math.min(ans, curr_ans);
        }

        System.out.println(ans);
    }
}
