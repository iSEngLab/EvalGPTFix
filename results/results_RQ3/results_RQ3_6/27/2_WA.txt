import java.util.*;

public class Main {

    private static class Pair implements Comparable<Pair> {
        int x;
        long score;

        public Pair(int x, long score) {
            this.x = x;
            this.score = score;
        }

        public String toString() {
            return "[" + this.x + "," + this.score + "]";
        }

        @Override
        public int compareTo(Pair other) {
            return Long.compare(other.score, this.score);
        }

    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        Map<Integer, Long> rows = new HashMap<Integer, Long>();
        Map<Integer, Long> cols = new HashMap<Integer, Long>();
        Map<Integer, Map<Integer, Integer>> val = new HashMap<Integer, Map<Integer, Integer>>();

        for (int i = 0; i < n; i++) {
            int r = sc.nextInt();
            int c = sc.nextInt();
            int x = sc.nextInt();

            rows.put(r, rows.getOrDefault(r, 0L) + x);
            cols.put(c, cols.getOrDefault(c, 0L) + x);

            Map<Integer, Integer> hm = val.getOrDefault(r, new HashMap<Integer, Integer>());
            hm.put(c, x);
            val.put(r, hm);
        }

        List<Pair> lrows = new ArrayList<Pair>();
        for (Integer x : rows.keySet())
            lrows.add(new Pair(x, rows.get(x)));
        Collections.sort(lrows);

        long ans = lrows.get(0).score;
        int i = 0;
        while (i < lrows.size() && val.get(lrows.get(i).x).containsKey(cols.entrySet().iterator().next().getKey()))
            i++;
        if (i < lrows.size())
            ans = Math.max(ans, lrows.get(i).score + cols.entrySet().iterator().next().getValue());

        System.out.println(ans);
    }
}
