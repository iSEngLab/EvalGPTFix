import java.util.*;

public class Main {

	private static class Pair implements Comparable<Pair> {
		int x;
		long score;

		public Pair(int x,long score) {
			this.x=x;
			this.score=score;
		}

		public String toString() {
			return "["+this.x+","+this.score+"]";
		}

		@Override
		public int compareTo(Pair other) {
			if(this.score>other.score)
				return -1;
			if(this.score<other.score)
				return 1;
			return 0;
		}

	}
    
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		HashMap<Integer, Long> rows=new HashMap<Integer, Long>();
		HashMap<Integer, Long> cols=new HashMap<Integer, Long>();
		HashMap<Integer, HashMap<Integer, Integer>> val=new HashMap<Integer, HashMap<Integer, Integer>>();
		for(int i=0;i<n;i++) {
			int r=sc.nextInt();
			int c=sc.nextInt();
			int x=sc.nextInt();
			rows.put(r,rows.getOrDefault(r,0L)+x);
			cols.put(c,cols.getOrDefault(c,0L)+x);
			HashMap<Integer, Integer> hm=val.getOrDefault(r,new HashMap<Integer, Integer>());
			hm.put(c,x);
			val.put(r,hm);
		}
		
		//Removed sorting of the columns
		
		long ans=0;
		for(Integer x:rows.keySet()) {
			Long rSum = rows.get(x);
			Long cMax = 0L;
			if (val.containsKey(x)) { //Check if the row exists in `val`
			        for(Integer y:val.get(x).keySet()) {
				        cMax = Math.max(cMax, cols.get(y)-val.get(x).get(y)); //Calculate the maximum score for the current row
			        }
			    }
			ans=Math.max(ans,rSum+cMax);
		}
		System.out.println(ans);
	}
}
