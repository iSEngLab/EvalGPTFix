long[][][] dp=new long[h+1][w+1][k+1];
dp[0][0][0]=1;
for(int i=0;i<h;i++){
    for(int j=0;j<w;j++){
        for(int l=0;l<=k;l++){
            long value = c.comb(h*w-2-i*j, k-l);
            dp[i+1][j][l]+=dp[i][j][l]*value%M;
            dp[i+1][j][l]%=M;
            dp[i][j+1][l]+=dp[i][j][l]*value%M;
            dp[i][j+1][l]%=M;
            dp[i+1][j][l+1]+=dp[i][j][l]*c.comb(i*j, l)%M;
            dp[i+1][j][l+1]%=M;
            dp[i][j+1][l+1]+=dp[i][j][l]*c.comb(i*j, l)%M;
            dp[i][j+1][l+1]%=M;
        }
    }
}

for(int i=0;i<=k;i++){
    long ways = dp[h-1][w-1][i]*c.comb(h*w-2, k-i)%M;
    if(i%2==0) { res+=ways; }
    else { res-=ways; }
    res = (res+M)%M;
}

long modinv = c.modinv(c.comb(h*w,k), M);
out.println((res*modinv%M));
