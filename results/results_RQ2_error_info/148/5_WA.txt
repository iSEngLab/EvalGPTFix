import java.util.Arrays;
import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        PriorityQueue<Long> q = new PriorityQueue<>();
        HashSet<Long> hashSet = new HashSet<>();
        long[] a = new long[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextLong();
            q.offer(a[i]);
            hashSet.add(a[i]);
        }

        long result = 0;

        // Instead of only keeping track of maximum values, we have to store all the values. 
        // The priority queue with sorting order as ascending order will help to retrieve smallest value at the end.
        PriorityQueue<Long> pq = new PriorityQueue<>();
        for (int i = 0; i < n; i++) {
            pq.offer(a[i] * -1);
        }

        for (int i = 0; i < k; i++) {
            if (pq.isEmpty()) {
                break;
            }
            result = pq.poll() * -1;
            for (int j = 0; j < n; j++) {
                long temp = result + a[j];
                if (hashSet.contains(temp)) {
                    continue;
                } else {
                    pq.offer(temp * -1);
                    hashSet.add(temp);
                }
            }
        }
        System.out.println(result); 
    }
}

input: 10 200000
554711317 806584789 280018632 62735624 328505817 16801479 685959884 161803065 709816353 611785786

expect: 2271400318

actual: 161316957800000

