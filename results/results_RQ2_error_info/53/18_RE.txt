import java.util.*; 
import java.io.*; 
import java.math.*;

public class Main {
	
    static class InputIterator {
        String[] inputLine;
        int index;
        InputIterator() {
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            try {
                inputLine = br.readLine().split(" ");
            } catch (IOException e) {
                e.printStackTrace();
            }
            index = 0;
        }
        boolean hasNext() {return (index < inputLine.length);}
        String next() {
            if (hasNext()) {
                return inputLine[index++];
            } else {
                throw new IndexOutOfBoundsException("There is no more input");
            }
        }
    }
    static HashMap<Integer, String> CONVSTR = new HashMap<>();
    static InputIterator ii = new InputIterator();
    static PrintWriter out = new PrintWriter(System.out);
    static void flush() {out.flush();}
    static void myout(Object t){out.println(t);}
    static void myerr(Object... t){System.err.print("debug:");System.err.println(Arrays.deepToString(t));}
    static String next() {return ii.next();}
    static boolean hasNext() {return ii.hasNext();}
    static int nextInt() {return Integer.parseInt(next());}
    static long nextLong() {return Long.parseLong(next());}
    static double nextDouble() {return Double.parseDouble(next());}
    static String[] nextCharArray() {return myconv(next(), 0);}
    static String[] nextStrArray(int size) {
        String[] ret = new String[size];
        for(int i = 0; i < size; i++) {
            ret[i] = next();
        }
        return ret;
    }
    static int[] nextIntArray(int size) {
        int[] ret = new int[size];
        for(int i = 0; i < size; i++){
            ret[i] = Integer.parseInt(next());
        }
        return ret;
    }
    static long[] nextLongArray(int size) {
        long[] ret = new long[size];
        for(int i = 0; i < size; i++){
            ret[i] = Long.parseLong(next());
        }
        return ret;
    }
    @SuppressWarnings("unchecked")
    static String myconv(Object list, int no){
        StringBuilder sb = new StringBuilder("");
        String joinString = CONVSTR.get(no);
        if(list instanceof String[]){
            return String.join(joinString, (String[])list);
        }else if(list instanceof long[]){
            long[] tmp = (long[])list;
            if(tmp.length == 0){
                return "";
            }
            sb.append(String.valueOf(tmp[0]));
            for(int i = 1; i < tmp.length; i++){
                sb.append(joinString).append(String.valueOf(tmp[i]));
            }
            return sb.toString();
        }else if(list instanceof int[]){
            int[] tmp = (int[])list;
            if(tmp.length == 0){
                return "";
            }
            sb.append(String.valueOf(tmp[0]));
            for(int i = 1; i < tmp.length; i++){
                sb.append(joinString).append(String.valueOf(tmp[i]));
            }
            return sb.toString();
        }else if(list instanceof ArrayList){
            ArrayList tmp = (ArrayList)list;
            if(tmp.size() == 0){
                return "";
            }
            sb.append(tmp.get(0));
            for(int i = 1; i < tmp.size(); i++){
                sb.append(joinString).append(tmp.get(i));
            }
            return sb.toString();
        }else{
            throw new ClassCastException("Don't join");
        }
    }
    static String[] myconv(String str, int no){
        String splitString = CONVSTR.get(no);
        return str.split(splitString);
    }
    static String[] myconv(String str, String no){
        return str.split(no);
    }
    
    public static void main(String[] args) {
        CONVSTR.put(8, " ");
        CONVSTR.put(9, "\n");
        CONVSTR.put(0, "");
        solve();
        flush();
    }
	
	
    static void solve() {
        int N = nextInt();
        int Q = nextInt();
        Set<Integer>[] set = new HashSet[200005];
        List<Integer>[] list = new ArrayList[200005];
        
        for(int i = 1; i <= 200000; i++) {
            set[i] = new HashSet<>();
            list[i] = new ArrayList<>();
        }
        
        for(int i = 0; i < Q; i++) {
            int t = nextInt();
            if(t == 1) {
                int V = nextInt();
                int U = nextInt();
                set[V].add(U);
                list[U].add(V);
            } else if(t == 2) {
                int V = nextInt();
                Collections.sort(list[V]);
                myout(String.join(" ", list[V].stream().map(e -> Integer.toString(e)).toArray(String[]::new)).concat(" "));
            } else {
                int V = nextInt();
                List<Integer> output = new ArrayList<>(set[V]);
                Collections.sort(output);
                myout(String.join(" ", output.stream().map(e -> Integer.toString(e)).toArray(String[]::new)).concat(" "));
            }
        }
    }
	
}

input: 5
8
1 1 1
1 2 4
1 1 4
2 4
1 1 4
2 4
3 1
3 2

expect: 1 2
1 1 2
1 4
4

