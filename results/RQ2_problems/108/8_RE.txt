import java.io.PrintWriter;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        PrintWriter out = new PrintWriter(System.out);
        Output op = new Output(sc, out);

        long a = op.nextLong();
        long b = op.nextLong();

        int count = 0;
        while (a != b) { // fix: the loop should run until a is equal to b and not until a is greater than 0 and b is greater than 0
            if (a > b) {
                count += a / b;
                a %= b; // fix: use the shorthand operator for modulus
            } else {
                count += b / a;
                b %= a; // fix: use the shorthand operator for modulus
            }
        }
        op.intResult(count); // fix: use the Output class method to print the answer
    }
}

class Output {
    private final Scanner sc;
    private final PrintWriter out;

    Output(Scanner sc, PrintWriter out) {
        this.sc = sc;
        this.out = out;
    }

    public void flush() {
        this.out.flush();
    }

    public void outPutInt(int x) { // fix: naming convention, capitalize the 'P' in Output
        this.out.println(x);
    }

    public void outPutString(String x) { // fix: naming convention, capitalize the 'P' in Output
        this.out.println(x);
    }

    public int nextInt() { // fix: naming convention, change to nextInt
        return sc.nextInt();
    }

    public char nextChar() {
        return sc.next().charAt(0);
    }

    public char[] nextCharArray() {
        return sc.next().toCharArray();
    }

    public long nextLong() { // fix: naming convention, change to nextLong
        return sc.nextLong();
    }

    public double nextDouble() {
        return sc.nextDouble();
    }

    public String next() {
        return sc.next();
    }

    public void intResult(int value) {
        out.println(value);
        out.flush();
    }

    public void strResult(String value) {
        out.println(value);
        out.flush();
    }
}

input: 9 737738327422964222

expect: 81970925269218254

